"use strict";

/*
 Sticky-kit v1.1.2 | WTFPL | Leaf Corcoran 2015 | http://leafo.net
*/
(function () {
  var b, f;
  b = window.jQuery;
  f = b(window);

  b.fn.stick_in_parent = function (d) {
    var A, w, J, n, B, K, p, q, k, E, t;
    null == d && (d = {});
    t = d.sticky_class;
    B = d.inner_scrolling;
    E = d.recalc_every;
    k = d.parent;
    q = d.offset_top;
    p = d.spacer;
    w = d.bottoming;
    null == q && (q = 0);
    null == k && (k = void 0);
    null == B && (B = !0);
    null == t && (t = 'is_stuck');
    A = b(document);
    null == w && (w = !0);

    J = function J(a, d, n, C, F, u, r, G) {
      var v, _H, m, D, I, c, g, x, y, z, h, l;

      if (!a.data('sticky_kit')) {
        a.data('sticky_kit', !0);
        I = A.height();
        g = a.parent();
        null != k && (g = g.closest(k));
        if (!g.length) throw 'failed to find stick parent';
        v = m = !1;
        (h = null != p ? p && a.closest(p) : b('<div />')) && h.css('position', a.css('position'));

        x = function x() {
          var c, f, e;
          if (!G && (I = A.height(), c = parseInt(g.css('border-top-width'), 10), f = parseInt(g.css('padding-top'), 10), d = parseInt(g.css('padding-bottom'), 10), n = g.offset().top + c + f, C = g.height(), m && (v = m = !1, null == p && (a.insertAfter(h), h.detach()), a.css({
            position: '',
            top: '',
            width: '',
            bottom: ''
          }).removeClass(t), e = !0), F = a.offset().top - (parseInt(a.css('margin-top'), 10) || 0) - q, u = a.outerHeight(!0), r = a.css('float'), h && h.css({
            width: a.outerWidth(!0),
            height: u,
            display: a.css('display'),
            'vertical-align': a.css('vertical-align'),
            "float": r
          }), e)) return l();
        };

        x();
        if (u !== C) return D = void 0, c = q, z = E, l = function l() {
          var b, l, e, k;
          if (!G && (e = !1, null != z && (--z, 0 >= z && (z = E, x(), e = !0)), e || A.height() === I || x(), e = f.scrollTop(), null != D && (l = e - D), D = e, m ? (w && (k = e + u + c > C + n, v && !k && (v = !1, a.css({
            position: 'fixed',
            bottom: '',
            top: c
          }).trigger('sticky_kit:unbottom'))), e < F && (m = !1, c = q, null == p && ('left' !== r && 'right' !== r || a.insertAfter(h), h.detach()), b = {
            position: '',
            width: '',
            top: ''
          }, a.css(b).removeClass(t).trigger('sticky_kit:unstick')), B && (b = f.height(), u + q > b && !v && (c -= l, c = Math.max(b - u, c), c = Math.min(q, c), m && a.css({
            top: c + 'px'
          })))) : e > F && (m = !0, b = {
            position: 'fixed',
            top: c
          }, b.width = 'border-box' === a.css('box-sizing') ? a.outerWidth() + 'px' : a.width() + 'px', a.css(b).addClass(t), null == p && (a.after(h), 'left' !== r && 'right' !== r || h.append(a)), a.trigger('sticky_kit:stick')), m && w && (null == k && (k = e + u + c > C + n), !v && k))) return v = !0, 'static' === g.css('position') && g.css({
            position: 'relative'
          }), a.css({
            position: 'absolute',
            bottom: d,
            top: 'auto'
          }).trigger('sticky_kit:bottom');
        }, y = function y() {
          x();
          return l();
        }, _H = function H() {
          G = !0;
          f.off('touchmove', l);
          f.off('scroll', l);
          f.off('resize', y);
          b(document.body).off('sticky_kit:recalc', y);
          a.off('sticky_kit:detach', _H);
          a.removeData('sticky_kit');
          a.css({
            position: '',
            bottom: '',
            top: '',
            width: ''
          });
          g.position('position', '');
          if (m) return null == p && ('left' !== r && 'right' !== r || a.insertAfter(h), h.remove()), a.removeClass(t);
        }, f.on('touchmove', l), f.on('scroll', l), f.on('resize', y), b(document.body).on('sticky_kit:recalc', y), a.on('sticky_kit:detach', _H), setTimeout(l, 0);
      }
    };

    n = 0;

    for (K = this.length; n < K; n++) {
      d = this[n], J(b(d));
    }

    return this;
  };
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";

var dayOfWeek = 6; // 0 - Sunday; 1-6 - Monday-Saturday

function getTimeRemaining(endtime) {
  var t = Date.parse(endtime) - Date.parse(new Date());
  var seconds = Math.floor(t / 1000 % 60);
  var minutes = Math.floor(t / 1000 / 60 % 60);
  var hours = Math.floor(t / (1000 * 60 * 60) % 24);
  var days = Math.floor(t / (1000 * 60 * 60 * 24));
  return {
    total: t,
    days: days,
    hours: hours,
    minutes: minutes,
    seconds: seconds
  };
}

function initializeClock(id, endtime) {
  var clock = document.getElementById(id);
  var daysSpan = clock.querySelector('.days');
  var hoursSpan = clock.querySelector('.hours');
  var minutesSpan = clock.querySelector('.minutes');
  var secondsSpan = clock.querySelector('.seconds');

  function updateClock() {
    var t = getTimeRemaining(endtime);
    daysSpan.innerHTML = ('0' + t.days).slice(-2);
    hoursSpan.innerHTML = ('0' + t.hours).slice(-2);
    minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);
    secondsSpan.innerHTML = ('0' + t.seconds).slice(-2);

    if (t.total <= 0) {
      clearInterval(timeinterval);
    }
  }

  updateClock();
  var timeinterval = setInterval(updateClock, 1000);
}
/* Calculate date of the next Sunday, Monday, etc. */


function calculateDeadline() {
  var d = new Date();
  var dateIncrement = (6 - d.getDay() + dayOfWeek) % 6;
  if (!dateIncrement) dateIncrement = 7;
  var deadline = new Date();
  deadline.setDate(d.getDate() + dateIncrement);
  deadline.setHours(0, 0, 1, 0);
  return deadline;
}
/* Print date of the deadline calculated at calculateDeadline() function. */


function printDeadline(className, deadlineDateObject) {
  var deadlineElements = document.getElementsByClassName(className);

  if (deadlineElements.length) {
    deadlineElements = Array.from(deadlineElements);
    deadlineElements.forEach(function (item) {
      item.innerHTML = deadlineDateObject.toLocaleString('ru', {
        month: 'long',
        day: 'numeric'
      });
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvdW50RG93bi5qcyJdLCJuYW1lcyI6WyJkYXlPZldlZWsiLCJnZXRUaW1lUmVtYWluaW5nIiwiZW5kdGltZSIsInQiLCJEYXRlIiwicGFyc2UiLCJzZWNvbmRzIiwiTWF0aCIsImZsb29yIiwibWludXRlcyIsImhvdXJzIiwiZGF5cyIsInRvdGFsIiwiaW5pdGlhbGl6ZUNsb2NrIiwiaWQiLCJjbG9jayIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJkYXlzU3BhbiIsInF1ZXJ5U2VsZWN0b3IiLCJob3Vyc1NwYW4iLCJtaW51dGVzU3BhbiIsInNlY29uZHNTcGFuIiwidXBkYXRlQ2xvY2siLCJpbm5lckhUTUwiLCJzbGljZSIsImNsZWFySW50ZXJ2YWwiLCJ0aW1laW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNhbGN1bGF0ZURlYWRsaW5lIiwiZCIsImRhdGVJbmNyZW1lbnQiLCJnZXREYXkiLCJkZWFkbGluZSIsInNldERhdGUiLCJnZXREYXRlIiwic2V0SG91cnMiLCJwcmludERlYWRsaW5lIiwiY2xhc3NOYW1lIiwiZGVhZGxpbmVEYXRlT2JqZWN0IiwiZGVhZGxpbmVFbGVtZW50cyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJsZW5ndGgiLCJBcnJheSIsImZyb20iLCJmb3JFYWNoIiwiaXRlbSIsInRvTG9jYWxlU3RyaW5nIiwibW9udGgiLCJkYXkiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsU0FBUyxHQUFHLENBQWhCLEMsQ0FBbUI7O0FBRW5CLFNBQVNDLGdCQUFULENBQTBCQyxPQUExQixFQUFtQztBQUNqQyxNQUFJQyxDQUFDLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxPQUFYLElBQXNCRSxJQUFJLENBQUNDLEtBQUwsQ0FBVyxJQUFJRCxJQUFKLEVBQVgsQ0FBOUI7QUFDQSxNQUFJRSxPQUFPLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFZTCxDQUFDLEdBQUcsSUFBTCxHQUFhLEVBQXhCLENBQWQ7QUFDQSxNQUFJ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LGFBQVQsQ0FBdUJDLFNBQXZCLEVBQWtDQyxrQkFBbEMsRUFBc0Q7QUFDcEQsTUFBSUMsZ0JBQWdCLEdBQUd4QixRQUFRLENBQUN5QixzQkFBVCxDQUFnQ0gsU0FBaEMsQ0FBdkI7O0FBQ0EsTUFBSUUsZ0JBQWdCLENBQUNFLE1BQXJCLEVBQTZCO0FBQzNCRixJQUFBQSxnQkFBZ0IsR0FBR0csS0FBSyxDQUFDQyxJQUFOLENBQVdKLGdCQUFYLENBQW5CO0FBQ0FBLElBQUFBLGdCQUFnQixDQUFDSyxPQUFqQixDQUF5QixVQUFVQyxJQUFWLEVBQWdCO0FBQ3ZDQSxNQUFBQSxJQUFJLENBQUN0QixTQUFMLEdBQWlCZSxrQkFBa0IsQ0FBQ1EsY0FBbkIsQ0FBa0MsSUFBbEMsRUFBd0M7QUFDdkRDLFFBQUFBLEtBQUssRUFBRSxNQURnRDtBQUV2REMsUUFBQUEsR0FBRyxFQUFFO0FBRmtELE9BQXhDLENBQWpCO0FBSUQsS0FMRDtBQU1EO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGF5T2ZXZWVrID0gNjsgLy8gMCAtIFN1bmRheTsgMS02IC0gTW9uZGF5LVNhdHVyZGF5XG5cbmZ1bmN0aW9uIGdldFRpbWVSZW1haW5pbmcoZW5kdGltZSkge1xuICB2YXIgdCA9IERhdGUucGFyc2UoZW5kdGltZSkgLSBEYXRlLnBhcnNlKG5ldyBEYXRlKCkpO1xuICB2YXIgc2Vjb25kcyA9IE1hdGguZmxvb3IoKHQgLyAxMDAwKSAlIDYwKTtcbiAgdmFyIG1pbnV0ZXMgPSBNYXRoLmZsb29yKCh0IC8gMTAwMCAvIDYwKSAlIDYwKTtcbiAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcigodCAvICgxMDAwICogNjAgKiA2MCkpICUgMjQpO1xuICB2YXIgZGF5cyA9IE1hdGguZmxvb3IodCAvICgxMDAwICogNjAgKiA2MCAqIDI0KSk7XG4gIHJldHVybiB7XG4gICAgdG90YWw6IHQsXG4gICAgZGF5czogZGF5cyxcbiAgICBob3VyczogaG91cnMsXG4gICAgbWludXRlczogbWludXRlcyxcbiAgICBzZWNvbmRzOiBzZWNvbmRzLFxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0aWFsaXplQ2xvY2soaWQsIGVuZHRpbWUpIHtcbiAgdmFyIGNsb2NrID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICB2YXIgZGF5c1NwYW4gPSBjbG9jay5xdWVyeVNlbGVjdG9yKCcuZGF5cycpO1xuICB2YXIgaG91cnNTcGFuID0gY2xvY2sucXVlcnlTZWxlY3RvcignLmhvdXJzJyk7XG4gIHZhciBtaW51dGVzU3BhbiA9IGNsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5taW51dGVzJyk7XG4gIHZhciBzZWNvbmRzU3BhbiA9IGNsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5zZWNvbmRzJyk7XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2xvY2soKSB7XG4gICAgdmFyIHQgPSBnZXRUaW1lUmVtYWluaW5nKGVuZHRpbWUpO1xuXG4gICAgZGF5c1NwYW4uaW5uZXJIVE1MID0gKCcwJyArIHQuZGF5cykuc2xpY2UoLTIpO1xuICAgIGhvdXJzU3Bhbi5pbm5lckhUTUwgPSAoJzAnICsgdC5ob3Vycykuc2xpY2UoLTIpO1xuICAgIG1pbnV0ZXNTcGFuLmlubmVySFRNTCA9ICgnMCcgKyB0Lm1pbnV0ZXMpLnNsaWNlKC0yKTtcbiAgICBzZWNvbmRzU3Bhbi5pbm5lckhUTUwgPSAoJzAnICsgdC5zZWNvbmRzKS5zbGljZSgtMik7XG5cbiAgICBpZiAodC50b3RhbCA8PSAwKSB7XG4gICAgICBjbGVhckludGVydmFsKHRpbWVpbnRlcnZhbCk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlQ2xvY2soKTtcbiAgdmFyIHRpbWVpbnRlcnZhbCA9IHNldEludGVydmFsKHVwZGF0ZUNsb2NrLCAxMDAwKTtcbn1cblxuLyogQ2FsY3VsYXRlIGRhdGUgb2YgdGhlIG5leHQgU3VuZGF5LCBNb25kYXksIGV0Yy4gKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZURlYWRsaW5lKCkge1xuICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gIHZhciBkYXRlSW5jcmVtZW50ID0gKDYgLSBkLmdldERheSgpICsgZGF5T2ZXZWVrKSAlIDY7XG5cbiAgaWYgKCFkYXRlSW5jcmVtZW50KSBkYXRlSW5jcmVtZW50ID0gNztcblxuICB2YXIgZGVhZGxpbmUgPSBuZXcgRGF0ZSgpO1xuICBkZWFkbGluZS5zZXREYXRlKGQuZ2V0RGF0ZSgpICsgZGF0ZUluY3JlbWVudCk7XG4gIGRlYWRsaW5lLnNldEhvdXJzKDAsIDAsIDEsIDApO1xuXG4gIHJldHVybiBkZWFkbGluZTtcbn1cblxuLyogUHJpbnQgZGF0ZSBvZiB0aGUgZGVhZGxpbmUgY2FsY3VsYXRlZCBhdCBjYWxjdWxhdGVEZWFkbGluZSgpIGZ1bmN0aW9uLiAqL1xuZnVuY3Rpb24gcHJpbnREZWFkbGluZShjbGFzc05hbWUsIGRlYWRsaW5lRGF0ZU9iamVjdCkge1xuICB2YXIgZGVhZGxpbmVFbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoY2xhc3NOYW1lKTtcbiAgaWYgKGRlYWRsaW5lRWxlbWVudHMubGVuZ3RoKSB7XG4gICAgZGVhZGxpbmVFbGVtZW50cyA9IEFycmF5LmZyb20oZGVhZGxpbmVFbGVtZW50cyk7XG4gICAgZGVhZGxpbmVFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICBpdGVtLmlubmVySFRNTCA9IGRlYWRsaW5lRGF0ZU9iamVjdC50b0xvY2FsZVN0cmluZygncnUnLCB7XG4gICAgICAgIG1vbnRoOiAnbG9uZycsXG4gICAgICAgIGRheTogJ251bWVyaWMnLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdLCJmaWxlIjoiY291bnREb3duLmpzIn0=

"use strict";

jQuery(document).ready(function ($) {
  // Плавный скролл
  var exceptions = sta_settings.exceptions.split(','),
      exceptionclass = '.accordion a[href*="#"]'; // check if any more classes need to be excluded

  if (exceptions != '') {
    for (var i = 0; i < exceptions.length; i++) {
      exceptionclass += ', ' + exceptions[i] + ' a[href*="#"]';
    }
  }

  $('a[href*="#"]').not('a[href="#"]') // Exception #1: dummy hrefs
  .not('a[href*="#modal"]').not(exceptionclass) // Even more exceptions, when set by the user
  .on('click', function (e) {
    //Split link into part before and after hash mark #
    var linktHref = this.href.split('#');

    if (linktHref[1] === '') {
      // Exception: orphaned # at end of URL
      return;
    }

    var currentUrlRoot = window.location.href.split('#')[0],
        scrollToAnchor = $('#' + linktHref[1]);
    currentUrlRoot = currentUrlRoot.replace(/\/$/, '');
    linktHref[0] = linktHref[0].replace(/\/$/, ''); // Do not animate for targets on another page

    if (linktHref[0] !== currentUrlRoot || !scrollToAnchor.length) {
      return;
    }

    $('html, body').animate({
      scrollTop: scrollToAnchor.offset().top - sta_settings.distance
    }, parseInt(sta_settings.speed, 10));
    e.preventDefault();
    return false;
  });
});
var sta_settings = {
  distance: '60',
  speed: '500',
  exceptions: ''
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNtb290aFNjcm9sbC5qcyJdLCJuYW1lcyI6WyJqUXVlcnkiLCJkb2N1bWVudCIsInJlYWR5IiwiJCIsImV4Y2VwdGlvbnMiLCJzdGFfc2V0dGluZ3MiLCJzcGxpdCIsImV4Y2VwdGlvbmNsYXNzIiwiaSIsImxlbmd0aCIsIm5vdCIsIm9uIiwiZSIsImxpbmt0SHJlZiIsImhyZWYiLCJjdXJyZW50VXJsUm9vdCIsIndpbmRvdyIsImxvY2F0aW9uIiwic2Nyb2xsVG9BbmNob3IiLCJyZXBsYWNlIiwiYW5pbWF0ZSIsInNjcm9sbFRvcCIsIm9mZnNldCIsInRvcCIsImRpc3RhbmNlIiwicGFyc2VJbnQiLCJzcGVlZCIsInByZXZlbnREZWZhdWx0Il0sIm1hcHBpbmdzIjoiOztBQUFBQSxNQUFNLENBQUNDLFFBQUQsQ0FBTixDQUFpQkMsS0FBakIsQ0FBdUIsVUFBVUMsQ0FBVixFQUFhO0FBQ2xDO0FBQ0EsTUFBSUMsVUFBVSxHQUFHQyxZQUFZLENBQUNELFVBQWIsQ0FBd0JFLEtBQXhCLENBQThCLEdBQTlCLENBQWpCO0FBQUEsTUFDRUMsY0FBYyxHQUFHLHlCQURuQixDQUZrQyxDQUtsQzs7QUFDQSxNQUFJSCxVQUFVLElBQUksRUFBbEIsRUFBc0I7QUFDcEIsU0FBSyxJQUFJSSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSixVQUFVLENBQUNLLE1BQS9CLEVBQXVDRCxDQUFDLEVBQXhDLEVBQTRDO0FBQzFDRCxNQUFBQSxjQUFjLElBQUksT0FBT0gsVUFBVSxDQUFDSSxDQUFELENBQWpCLEdBQXVCLGVBQXpDO0FBQ0Q7QUFDRjs7QUFFREwsRUFBQUEsQ0FBQyxDQUFDLGNBQUQsQ0FBRCxDQUNHTyxHQURILENBQ08sYUFEUCxFQUNzQjtBQUR0QixHQUVHQSxHQUZILENBRU8sbUJBRlAsRUFHR0EsR0FISCxDQUdPSCxjQUhQLEVBR3VCO0FBSHZCLEdBSUdJLEVBSkgsQ0FJTSxPQUpOLEVBSWUsVUFBVUMsQ0FBVixFQUFhO0FBQ3hCO0FBQ0EsUUFBSUMsU0FBUyxHQUFHLEtBQUtDLElBQUwsQ0FBVVIsS0FBVixDQUFnQixHQUFoQixDQUFoQjs7QUFFQSxRQUFJTyxTQUFTLENBQUMsQ0FBRCxDQUFULEtBQWlCLEVBQXJCLEVBQXlCO0FBQ3ZCO0FBQ0E7QUFDRDs7QUFFRCxRQUFJRSxjQUFjLEdBQUdDLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQkgsSUFBaEIsQ0FBcUJSLEtBQXJCLENBQTJCLEdBQTNCLEVBQWdDLENBQWhDLENBQXJCO0FBQUEsUUFDRVksY0FBYyxHQUFHZixDQUFDLENBQUMsTUFBTVUsU0FBUyxDQUFDLENBQUQsQ0FBaEIsQ0FEcEI7QUFHQUUsSUFBQUEsY0FBYyxHQUFHQSxjQUFjLENBQUNJLE9BQWYsQ0FBdUIsS0FBdkIsRUFBOEIsRUFBOUIsQ0FBakI7QUFDQU4sSUFBQUEsU0FBUyxDQUFDLENBQUQsQ0FBVCxHQUFlQSxTQUFTLENBQUMsQ0FBRCxDQUFULENBQWFNLE9BQWIsQ0FBcUIsS0FBckIsRUFBNEIsRUFBNUIsQ0FBZixDQWJ3QixDQWV4Qjs7QUFDQSxRQUFJTixTQUFTLENBQUMsQ0FBRCxDQUFULEtBQWlCRSxjQUFqQixJQUFtQyxDQUFDRyxjQUFjLENBQUNULE1BQXZELEVBQStEO0FBQzdEO0FBQ0Q7O0FBRUROLElBQUFBLENBQUMsQ0FBQyxZQUFELENBQUQsQ0FBZ0JpQixPQUFoQixDQUNFO0FBQ0VDLE1BQUFBLFNBQVMsRUFBRUgsY0FBYyxDQUFDSSxNQUFmLEdBQXdCQyxHQUF4QixHQUE4QmxCLFlBQVksQ0FBQ21CO0FBRHhELEtBREYsRUFJRUMsUUFBUSxDQUFDcEIsWUFBWSxDQUFDcUIsS0FBZCxFQUFxQixFQUFyQixDQUpWO0FBT0FkLElBQUFBLENBQUMsQ0FBQ2UsY0FBRjtBQUNBLFdBQU8sS0FBUDtBQUNELEdBakNIO0FBa0NELENBOUNEO0FBK0NBLElBQUl0QixZQUFZLEdBQUc7QUFBRW1CLEVBQUFBLFFBQVEsRUFBRSxJQUFaO0FBQWtCRSxFQUFBQSxLQUFLLEVBQUUsS0FBekI7QUFBZ0N0QixFQUFBQSxVQUFVLEVBQUU7QUFBNUMsQ0FBbkIiLCJzb3VyY2VzQ29udGVudCI6WyJqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgkKSB7XG4gIC8vINCf0LvQsNCy0L3Ri9C5INGB0LrRgNC+0LvQu1xuICB2YXIgZXhjZXB0aW9ucyA9IHN0YV9zZXR0aW5ncy5leGNlcHRpb25zLnNwbGl0KCcsJyksXG4gICAgZXhjZXB0aW9uY2xhc3MgPSAnLmFjY29yZGlvbiBhW2hyZWYqPVwiI1wiXSc7XG5cbiAgLy8gY2hlY2sgaWYgYW55IG1vcmUgY2xhc3NlcyBuZWVkIHRvIGJlIGV4Y2x1ZGVkXG4gIGlmIChleGNlcHRpb25zICE9ICcnKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleGNlcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBleGNlcHRpb25jbGFzcyArPSAnLCAnICsgZXhjZXB0aW9uc1tpXSArICcgYVtocmVmKj1cIiNcIl0nO1xuICAgIH1cbiAgfVxuXG4gICQoJ2FbaHJlZio9XCIjXCJdJylcbiAgICAubm90KCdhW2hyZWY9XCIjXCJdJykgLy8gRXhjZXB0aW9uICMxOiBkdW1teSBocmVmc1xuICAgIC5ub3QoJ2FbaHJlZio9XCIjbW9kYWxcIl0nKVxuICAgIC5ub3QoZXhjZXB0aW9uY2xhc3MpIC8vIEV2ZW4gbW9yZSBleGNlcHRpb25zLCB3aGVuIHNldCBieSB0aGUgdXNlclxuICAgIC5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgLy9TcGxpdCBsaW5rIGludG8gcGFydCBiZWZvcmUgYW5kIGFmdGVyIGhhc2ggbWFyayAjXG4gICAgICB2YXIgbGlua3RIcmVmID0gdGhpcy5ocmVmLnNwbGl0KCcjJyk7XG5cbiAgICAgIGlmIChsaW5rdEhyZWZbMV0gPT09ICcnKSB7XG4gICAgICAgIC8vIEV4Y2VwdGlvbjogb3JwaGFuZWQgIyBhdCBlbmQgb2YgVVJMXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1cnJlbnRVcmxSb290ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoJyMnKVswXSxcbiAgICAgICAgc2Nyb2xsVG9BbmNob3IgPSAkKCcjJyArIGxpbmt0SHJlZlsxXSk7XG5cbiAgICAgIGN1cnJlbnRVcmxSb290ID0gY3VycmVudFVybFJvb3QucmVwbGFjZSgvXFwvJC8sICcnKTtcbiAgICAgIGxpbmt0SHJlZlswXSA9IGxpbmt0SHJlZlswXS5yZXBsYWNlKC9cXC8kLywgJycpO1xuXG4gICAgICAvLyBEbyBub3QgYW5pbWF0ZSBmb3IgdGFyZ2V0cyBvbiBhbm90aGVyIHBhZ2VcbiAgICAgIGlmIChsaW5rdEhyZWZbMF0gIT09IGN1cnJlbnRVcmxSb290IHx8ICFzY3JvbGxUb0FuY2hvci5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZShcbiAgICAgICAge1xuICAgICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9BbmNob3Iub2Zmc2V0KCkudG9wIC0gc3RhX3NldHRpbmdzLmRpc3RhbmNlLFxuICAgICAgICB9LFxuICAgICAgICBwYXJzZUludChzdGFfc2V0dGluZ3Muc3BlZWQsIDEwKVxuICAgICAgKTtcblxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xufSk7XG52YXIgc3RhX3NldHRpbmdzID0geyBkaXN0YW5jZTogJzYwJywgc3BlZWQ6ICc1MDAnLCBleGNlcHRpb25zOiAnJyB9O1xuIl0sImZpbGUiOiJzbW9vdGhTY3JvbGwuanMifQ==

"use strict";

/**
 * stacktable.js
 * Author & copyright (c) 2012: John Polacek
 * CardTable by: Justin McNally (2015)
 * MIT license
 *
 * Page: http://johnpolacek.github.com/stacktable.js
 * Repo: https://github.com/johnpolacek/stacktable.js/
 *
 * jQuery plugin for stacking tables on small screens
 * Requires jQuery version 1.7 or above
 *
 */
(function ($) {
  $.fn.cardtable = function (options) {
    var $tables = this,
        defaults = {
      headIndex: 0
    },
        settings = $.extend({}, defaults, options),
        headIndex; // checking the "headIndex" option presence... or defaults it to 0

    if (options && options.headIndex) headIndex = options.headIndex;else headIndex = 0;
    return $tables.each(function () {
      var $table = $(this);

      if ($table.hasClass('stacktable')) {
        return;
      }

      var table_css = $(this).prop('class');
      var $stacktable = $('<div></div>');
      if (typeof settings.myClass !== 'undefined') $stacktable.addClass(settings.myClass);
      var markup = '';
      var $caption, $topRow, headMarkup, bodyMarkup, tr_class;
      $table.addClass('stacktable large-only');
      $caption = $table.find('>caption').clone();
      $topRow = $table.find('>thead>tr,>tbody>tr,>tfoot>tr,>tr').eq(0); // avoid duplication when paginating

      $table.siblings().filter('.small-only').remove(); // using rowIndex and cellIndex in order to reduce ambiguity

      $table.find('>tbody>tr').each(function () {
        // declaring headMarkup and bodyMarkup, to be used for separately head and body of single records
        headMarkup = '';
        bodyMarkup = '';
        tr_class = $(this).prop('class'); // for the first row, "headIndex" cell is the head of the table
        // for the other rows, put the "headIndex" cell as the head for that row
        // then iterate through the key/values

        $(this).find('>td,>th').each(function (cellIndex) {
          if ($(this).html() !== '') {
            bodyMarkup += '<tr class="' + tr_class + '">';

            if ($topRow.find('>td,>th').eq(cellIndex).html()) {
              bodyMarkup += '<td class="st-key">' + $topRow.find('>td,>th').eq(cellIndex).html() + '</td>';
            } else {
              bodyMarkup += '<td class="st-key"></td>';
            }

            bodyMarkup += '<td class="st-val ' + $(this).prop('class') + '">' + $(this).html() + '</td>';
            bodyMarkup += '</tr>';
          }
        });
        markup += '<table class=" ' + table_css + ' stacktable small-only"><tbody>' + headMarkup + bodyMarkup + '</tbody></table>';
      });
      $table.find('>tfoot>tr>td').each(function (rowIndex, value) {
        if ($.trim($(value).text()) !== '') {
          markup += '<table class="' + table_css + ' stacktable small-only"><tbody><tr><td>' + $(value).html() + '</td></tr></tbody></table>';
        }
      });
      $stacktable.prepend($caption);
      $stacktable.append($(markup));
      $table.before($stacktable);
    });
  };

  $.fn.stacktable = function (options) {
    var $tables = this,
        defaults = {
      headIndex: 0,
      displayHeader: true
    },
        settings = $.extend({}, defaults, options),
        headIndex; // checking the "headIndex" option presence... or defaults it to 0

    if (options && options.headIndex) headIndex = options.headIndex;else headIndex = 0;
    return $tables.each(function () {
      var table_css = $(this).prop('class');
      var $stacktable = $('<table class="' + table_css + ' stacktable small-only"><tbody></tbody></table>');
      if (typeof settings.myClass !== 'undefined') $stacktable.addClass(settings.myClass);
      var markup = '';
      var $table, $caption, $topRow, headMarkup, bodyMarkup, tr_class, displayHeader;
      $table = $(this);
      $table.addClass('stacktable large-only');
      $caption = $table.find('>caption').clone();
      $topRow = $table.find('>thead>tr,>tbody>tr,>tfoot>tr').eq(0);
      displayHeader = $table.data('display-header') === undefined ? settings.displayHeader : $table.data('display-header'); // using rowIndex and cellIndex in order to reduce ambiguity

      $table.find('>tbody>tr, >thead>tr').each(function (rowIndex) {
        // declaring headMarkup and bodyMarkup, to be used for separately head and body of single records
        headMarkup = '';
        bodyMarkup = '';
        tr_class = $(this).prop('class'); // for the first row, "headIndex" cell is the head of the table

        if (rowIndex === 0) {
          // the main heading goes into the markup variable
          if (displayHeader) {
            markup += '<tr class=" ' + tr_class + ' "><th class="st-head-row st-head-row-main" colspan="2">' + $(this).find('>th,>td').eq(headIndex).html() + '</th></tr>';
          }
        } else {
          // for the other rows, put the "headIndex" cell as the head for that row
          // then iterate through the key/values
          $(this).find('>td,>th').each(function (cellIndex) {
            if (cellIndex === headIndex) {
              headMarkup = '<tr class="' + tr_class + '"><th class="st-head-row" colspan="2">' + $(this).html() + '</th></tr>';
            } else {
              if ($(this).html() !== '') {
                bodyMarkup += '<tr class="' + tr_class + '">';

                if ($topRow.find('>td,>th').eq(cellIndex).html()) {
                  bodyMarkup += '<td class="st-key">' + $topRow.find('>td,>th').eq(cellIndex).html() + '</td>';
                } else {
                  bodyMarkup += '<td class="st-key"></td>';
                }

                bodyMarkup += '<td class="st-val ' + $(this).prop('class') + '">' + $(this).html() + '</td>';
                bodyMarkup += '</tr>';
              }
            }
          });
          markup += headMarkup + bodyMarkup;
        }
      });
      $stacktable.prepend($caption);
      $stacktable.append($(markup));
      $table.before($stacktable);
    });
  };

  $.fn.stackcolumns = function (options) {
    var $tables = this,
        defaults = {},
        settings = $.extend({}, defaults, options);
    return $tables.each(function () {
      var $table = $(this);
      var $caption = $table.find('>caption').clone();
      var num_cols = $table.find('>thead>tr,>tbody>tr,>tfoot>tr').eq(0).find('>td,>th').length; //first table <tr> must not contain colspans, or add sum(colspan-1) here.

      if (num_cols < 3) //stackcolumns has no effect on tables with less than 3 columns
        return;
      var $stackcolumns = $('<table class="stacktable small-only"></table>');
      if (typeof settings.myClass !== 'undefined') $stackcolumns.addClass(settings.myClass);
      $table.addClass('stacktable large-only');
      var tb = $('<tbody></tbody>');
      var col_i = 1; //col index starts at 0 -> start copy at second column.

      while (col_i < num_cols) {
        $table.find('>thead>tr,>tbody>tr,>tfoot>tr').each(function (index) {
          var tem = $('<tr></tr>'); // todo opt. copy styles of $this; todo check if parent is thead or tfoot to handle accordingly

          if (index === 0) tem.addClass('st-head-row st-head-row-main');
          var first = $(this).find('>td,>th').eq(0).clone().addClass('st-key');
          var target = col_i; // if colspan apply, recompute target for second cell.

          if ($(this).find('*[colspan]').length) {
            var i = 0;
            $(this).find('>td,>th').each(function () {
              var cs = $(this).attr('colspan');

              if (cs) {
                cs = parseInt(cs, 10);
                target -= cs - 1;
                if (i + cs > col_i) //out of current bounds
                  target += i + cs - col_i - 1;
                i += cs;
              } else {
                i++;
              }

              if (i > col_i) return false; //target is set; break.
            });
          }

          var second = $(this).find('>td,>th').eq(target).clone().addClass('st-val').removeAttr('colspan');
          tem.append(first, second);
          tb.append(tem);
        });
        ++col_i;
      }

      $stackcolumns.append($(tb));
      $stackcolumns.prepend($caption);
      $table.before($stackcolumns);
    });
  }; // ТАБЛИЦА


  $('table').stacktable();
})(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";

function toggle_answer(e) {
  $(e).find('.answer').toggle(300);
  $(e).toggleClass('active');
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvZ2dsZV9hbnN3ZXIuanMiXSwibmFtZXMiOlsidG9nZ2xlX2Fuc3dlciIsImUiLCIkIiwiZmluZCIsInRvZ2dsZSIsInRvZ2dsZUNsYXNzIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLGFBQVQsQ0FBdUJDLENBQXZCLEVBQTBCO0FBQ3hCQyxFQUFBQSxDQUFDLENBQUNELENBQUQsQ0FBRCxDQUFLRSxJQUFMLENBQVUsU0FBVixFQUFxQkMsTUFBckIsQ0FBNEIsR0FBNUI7QUFDQUYsRUFBQUEsQ0FBQyxDQUFDRCxDQUFELENBQUQsQ0FBS0ksV0FBTCxDQUFpQixRQUFqQjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gdG9nZ2xlX2Fuc3dlcihlKSB7XG4gICQoZSkuZmluZCgnLmFuc3dlcicpLnRvZ2dsZSgzMDApO1xuICAkKGUpLnRvZ2dsZUNsYXNzKCdhY3RpdmUnKTtcbn1cbiJdLCJmaWxlIjoidG9nZ2xlX2Fuc3dlci5qcyJ9

"use strict";

function toggle_burger(e) {
  $(e).toggleClass('active');
  $('#mainnav-menu').fadeToggle(300);
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvZ2dsZV9idXJnZXIuanMiXSwibmFtZXMiOlsidG9nZ2xlX2J1cmdlciIsImUiLCIkIiwidG9nZ2xlQ2xhc3MiLCJmYWRlVG9nZ2xlIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLGFBQVQsQ0FBdUJDLENBQXZCLEVBQTBCO0FBQ3hCQyxFQUFBQSxDQUFDLENBQUNELENBQUQsQ0FBRCxDQUFLRSxXQUFMLENBQWlCLFFBQWpCO0FBQ0FELEVBQUFBLENBQUMsQ0FBQyxlQUFELENBQUQsQ0FBbUJFLFVBQW5CLENBQThCLEdBQTlCO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB0b2dnbGVfYnVyZ2VyKGUpIHtcbiAgJChlKS50b2dnbGVDbGFzcygnYWN0aXZlJyk7XG4gICQoJyNtYWlubmF2LW1lbnUnKS5mYWRlVG9nZ2xlKDMwMCk7XG59XG4iXSwiZmlsZSI6InRvZ2dsZV9idXJnZXIuanMifQ==

"use strict";

jQuery(document).ready(function ($) {
  // Sticky side navigation
  var width = $(window).width();

  if (width >= 768) {
    $('#sticky-nav').stick_in_parent({
      offset_top: 80
    });
    $('#sticky-nav-2').stick_in_parent({
      offset_top: 80
    });
  }

  $(window).resize(function () {
    var changedWidth = $(window).width();

    if (changedWidth < 768) {
      $('#sticky-nav').trigger('sticky_kit:detach');
      $('#sticky-nav-2').trigger('sticky_kit:detach');
    } else {
      $('#sticky-nav').stick_in_parent({
        offset_top: 80
      });
      $('#sticky-nav-2').stick_in_parent({
        offset_top: 80
      });
    }
  }); // Sticky .logo-wrap

  $(window).scroll(function () {
    $('.header-wrapper').toggleClass('is-sticky', $(this).scrollTop() > 0);
  });
  printDeadline('sale-last-day', calculateDeadline()); // if($('#clockdiv').length) { initializeClock('clockdiv', calculateDeadline()); }

  if ($('#clockdiv-page').length) {
    initializeClock('clockdiv-page', calculateDeadline());
  }
});